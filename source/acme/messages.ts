// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type AccountBase = {
	"contact"?: string[],
	"termsOfServiceAgreed"?: boolean,
	"externalAccountBinding"?: {}
};

export const AccountBase = {
	as(subject: any, path: string = ""): AccountBase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					try {
						return ((subject, path) => {
							if (subject === undefined) {
								return subject;
							}
							throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									((subject, path) => {
										if ((subject != null) && (subject.constructor === globalThis.String)) {
											return subject;
										}
										throw "Type guard \"String\" failed at \"" + path + "\"!";
									})(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Type guard \"Array\" failed at \"" + path + "\"!";
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["contact"], path + "[\"contact\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if (subject === undefined) {
								return subject;
							}
							throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Boolean)) {
								return subject;
							}
							throw "Type guard \"Boolean\" failed at \"" + path + "\"!";
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["termsOfServiceAgreed"], path + "[\"termsOfServiceAgreed\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if (subject === undefined) {
								return subject;
							}
							throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Object)) {
								return subject;
							}
							throw "Type guard \"Object\" failed at \"" + path + "\"!";
						})(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["externalAccountBinding"], path + "[\"externalAccountBinding\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is AccountBase {
		try {
			AccountBase.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Account = (AccountBase & {
	"status": ("valid" | "deactivated" | "revoked"),
	"orders": string
});

export const Account = {
	as(subject: any, path: string = ""): Account {
		return ((subject, path) => {
			(AccountBase.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === globalThis.Object)) {
					((subject, path) => {
						try {
							return ((subject, path) => {
								if (subject === "valid") {
									return subject;
								}
								throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						try {
							return ((subject, path) => {
								if (subject === "deactivated") {
									return subject;
								}
								throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						try {
							return ((subject, path) => {
								if (subject === "revoked") {
									return subject;
								}
								throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						throw "Type guard \"Union\" failed at \"" + path + "\"!";
					})(subject["status"], path + "[\"status\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject;
						}
						throw "Type guard \"String\" failed at \"" + path + "\"!";
					})(subject["orders"], path + "[\"orders\"]");
					return subject;
				}
				throw "Type guard \"Object\" failed at \"" + path + "\"!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is Account {
		try {
			Account.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type NewAccountJWSPayload = (AccountBase & {
	"onlyReturnExisting"?: boolean
});

export const NewAccountJWSPayload = {
	as(subject: any, path: string = ""): NewAccountJWSPayload {
		return ((subject, path) => {
			(AccountBase.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === globalThis.Object)) {
					((subject, path) => {
						try {
							return ((subject, path) => {
								if (subject === undefined) {
									return subject;
								}
								throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						try {
							return ((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.Boolean)) {
									return subject;
								}
								throw "Type guard \"Boolean\" failed at \"" + path + "\"!";
							})(subject, path);
						} catch (error) {}
						throw "Type guard \"Union\" failed at \"" + path + "\"!";
					})(subject["onlyReturnExisting"], path + "[\"onlyReturnExisting\"]");
					return subject;
				}
				throw "Type guard \"Object\" failed at \"" + path + "\"!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is NewAccountJWSPayload {
		try {
			NewAccountJWSPayload.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type GetDirectoryResponse = {
	"body": {
		"keyChange": string,
		"meta"?: {
			"caaIdentities"?: string[],
			"externalAccountRequired"?: boolean,
			"termsOfService"?: string,
			"website"?: string
		},
		"newAccount": string,
		"newAuthz"?: string,
		"newNonce": string,
		"newOrder": string,
		"revokeCert": string
	}
};

export const GetDirectoryResponse = {
	as(subject: any, path: string = ""): GetDirectoryResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject;
							}
							throw "Type guard \"String\" failed at \"" + path + "\"!";
						})(subject["keyChange"], path + "[\"keyChange\"]");
						((subject, path) => {
							try {
								return ((subject, path) => {
									if (subject === undefined) {
										return subject;
									}
									throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
								})(subject, path);
							} catch (error) {}
							try {
								return ((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											try {
												return ((subject, path) => {
													if (subject === undefined) {
														return subject;
													}
													throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
												})(subject, path);
											} catch (error) {}
											try {
												return ((subject, path) => {
													if ((subject != null) && (subject.constructor === globalThis.Array)) {
														for (let i = 0; i < subject.length; i++) {
															((subject, path) => {
																if ((subject != null) && (subject.constructor === globalThis.String)) {
																	return subject;
																}
																throw "Type guard \"String\" failed at \"" + path + "\"!";
															})(subject[i], path + "[" + i + "]");
														}
														return subject;
													}
													throw "Type guard \"Array\" failed at \"" + path + "\"!";
												})(subject, path);
											} catch (error) {}
											throw "Type guard \"Union\" failed at \"" + path + "\"!";
										})(subject["caaIdentities"], path + "[\"caaIdentities\"]");
										((subject, path) => {
											try {
												return ((subject, path) => {
													if (subject === undefined) {
														return subject;
													}
													throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
												})(subject, path);
											} catch (error) {}
											try {
												return ((subject, path) => {
													if ((subject != null) && (subject.constructor === globalThis.Boolean)) {
														return subject;
													}
													throw "Type guard \"Boolean\" failed at \"" + path + "\"!";
												})(subject, path);
											} catch (error) {}
											throw "Type guard \"Union\" failed at \"" + path + "\"!";
										})(subject["externalAccountRequired"], path + "[\"externalAccountRequired\"]");
										((subject, path) => {
											try {
												return ((subject, path) => {
													if (subject === undefined) {
														return subject;
													}
													throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
												})(subject, path);
											} catch (error) {}
											try {
												return ((subject, path) => {
													if ((subject != null) && (subject.constructor === globalThis.String)) {
														return subject;
													}
													throw "Type guard \"String\" failed at \"" + path + "\"!";
												})(subject, path);
											} catch (error) {}
											throw "Type guard \"Union\" failed at \"" + path + "\"!";
										})(subject["termsOfService"], path + "[\"termsOfService\"]");
										((subject, path) => {
											try {
												return ((subject, path) => {
													if (subject === undefined) {
														return subject;
													}
													throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
												})(subject, path);
											} catch (error) {}
											try {
												return ((subject, path) => {
													if ((subject != null) && (subject.constructor === globalThis.String)) {
														return subject;
													}
													throw "Type guard \"String\" failed at \"" + path + "\"!";
												})(subject, path);
											} catch (error) {}
											throw "Type guard \"Union\" failed at \"" + path + "\"!";
										})(subject["website"], path + "[\"website\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject, path);
							} catch (error) {}
							throw "Type guard \"Union\" failed at \"" + path + "\"!";
						})(subject["meta"], path + "[\"meta\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject;
							}
							throw "Type guard \"String\" failed at \"" + path + "\"!";
						})(subject["newAccount"], path + "[\"newAccount\"]");
						((subject, path) => {
							try {
								return ((subject, path) => {
									if (subject === undefined) {
										return subject;
									}
									throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
								})(subject, path);
							} catch (error) {}
							try {
								return ((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject;
									}
									throw "Type guard \"String\" failed at \"" + path + "\"!";
								})(subject, path);
							} catch (error) {}
							throw "Type guard \"Union\" failed at \"" + path + "\"!";
						})(subject["newAuthz"], path + "[\"newAuthz\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject;
							}
							throw "Type guard \"String\" failed at \"" + path + "\"!";
						})(subject["newNonce"], path + "[\"newNonce\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject;
							}
							throw "Type guard \"String\" failed at \"" + path + "\"!";
						})(subject["newOrder"], path + "[\"newOrder\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject;
							}
							throw "Type guard \"String\" failed at \"" + path + "\"!";
						})(subject["revokeCert"], path + "[\"revokeCert\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["body"], path + "[\"body\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is GetDirectoryResponse {
		try {
			GetDirectoryResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type NewNonceResponse = {
	"status": 200,
	"headers": {
		"Replay-Nonce": [
			string
		]
	}
};

export const NewNonceResponse = {
	as(subject: any, path: string = ""): NewNonceResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if (subject === 200) {
						return subject;
					}
					throw "Type guard \"NumberLiteral\" failed at \"" + path + "\"!";
				})(subject["status"], path + "[\"status\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject;
									}
									throw "Type guard \"String\" failed at \"" + path + "\"!";
								})(subject[0], path + "[0]");
								return subject;
							}
							throw "Type guard \"Tuple\" failed at \"" + path + "\"!";
						})(subject["Replay-Nonce"], path + "[\"Replay-Nonce\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["headers"], path + "[\"headers\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is NewNonceResponse {
		try {
			NewNonceResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type NewAccountResponse = {
	"status": 201,
	"headers": {
		"Replay-Nonce": [
			string
		],
		"Location": [
			string
		]
	},
	"body": Account
};

export const NewAccountResponse = {
	as(subject: any, path: string = ""): NewAccountResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if (subject === 201) {
						return subject;
					}
					throw "Type guard \"NumberLiteral\" failed at \"" + path + "\"!";
				})(subject["status"], path + "[\"status\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject;
									}
									throw "Type guard \"String\" failed at \"" + path + "\"!";
								})(subject[0], path + "[0]");
								return subject;
							}
							throw "Type guard \"Tuple\" failed at \"" + path + "\"!";
						})(subject["Replay-Nonce"], path + "[\"Replay-Nonce\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject;
									}
									throw "Type guard \"String\" failed at \"" + path + "\"!";
								})(subject[0], path + "[0]");
								return subject;
							}
							throw "Type guard \"Tuple\" failed at \"" + path + "\"!";
						})(subject["Location"], path + "[\"Location\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["headers"], path + "[\"headers\"]");
				(Account.as)(subject["body"], path + "[\"body\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is NewAccountResponse {
		try {
			NewAccountResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"AccountBase": AccountBase,
	"Account": Account,
	"NewAccountJWSPayload": NewAccountJWSPayload,
	"GetDirectoryResponse": GetDirectoryResponse,
	"NewNonceResponse": NewNonceResponse,
	"NewAccountResponse": NewAccountResponse
};

export const Autoguard = {
	"AccountBase": AccountBase,
	"Account": Account,
	"NewAccountJWSPayload": NewAccountJWSPayload,
	"GetDirectoryResponse": GetDirectoryResponse,
	"NewNonceResponse": NewNonceResponse,
	"NewAccountResponse": NewAccountResponse
};
