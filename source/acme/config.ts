// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type Config = {
	"agree_to_tos": boolean,
	"contact": string[],
	"directories": {
		"staging": string,
		"production": string
	},
	"domains": {
		"hostname": string,
		"wildcard": boolean
	}[]
};

export const Config = {
	as(subject: any, path: string = ""): Config {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Boolean)) {
						return subject;
					}
					throw "Type guard \"Boolean\" failed at \"" + path + "\"!";
				})(subject["agree_to_tos"], path + "[\"agree_to_tos\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.String)) {
									return subject;
								}
								throw "Type guard \"String\" failed at \"" + path + "\"!";
							})(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["contact"], path + "[\"contact\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject;
							}
							throw "Type guard \"String\" failed at \"" + path + "\"!";
						})(subject["staging"], path + "[\"staging\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject;
							}
							throw "Type guard \"String\" failed at \"" + path + "\"!";
						})(subject["production"], path + "[\"production\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["directories"], path + "[\"directories\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.Object)) {
									((subject, path) => {
										if ((subject != null) && (subject.constructor === globalThis.String)) {
											return subject;
										}
										throw "Type guard \"String\" failed at \"" + path + "\"!";
									})(subject["hostname"], path + "[\"hostname\"]");
									((subject, path) => {
										if ((subject != null) && (subject.constructor === globalThis.Boolean)) {
											return subject;
										}
										throw "Type guard \"Boolean\" failed at \"" + path + "\"!";
									})(subject["wildcard"], path + "[\"wildcard\"]");
									return subject;
								}
								throw "Type guard \"Object\" failed at \"" + path + "\"!";
							})(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Type guard \"Array\" failed at \"" + path + "\"!";
				})(subject["domains"], path + "[\"domains\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Config {
		try {
			Config.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"Config": Config
};

export const Autoguard = {
	"Config": Config
};
