// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type PrivateKey = [
	{
		"data": [
			{
				"data": string
			},
			{
				"data": string
			},
			{
				"data": string
			},
			{
				"data": string
			},
			{
				"data": string
			},
			{
				"data": string
			},
			{
				"data": string
			},
			{
				"data": string
			},
			{
				"data": string
			}
		]
	}
];

export const PrivateKey = {
	as(subject: any, path: string = ""): PrivateKey {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Array)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[0], path + "[0]");
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[1], path + "[1]");
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[2], path + "[2]");
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[3], path + "[3]");
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[4], path + "[4]");
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[5], path + "[5]");
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[6], path + "[6]");
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[7], path + "[7]");
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.Object)) {
										((subject, path) => {
											if ((subject != null) && (subject.constructor === globalThis.String)) {
												return subject;
											}
											throw "Type guard \"String\" failed at \"" + path + "\"!";
										})(subject["data"], path + "[\"data\"]");
										return subject;
									}
									throw "Type guard \"Object\" failed at \"" + path + "\"!";
								})(subject[8], path + "[8]");
								return subject;
							}
							throw "Type guard \"Tuple\" failed at \"" + path + "\"!";
						})(subject["data"], path + "[\"data\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject[0], path + "[0]");
				return subject;
			}
			throw "Type guard \"Tuple\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is PrivateKey {
		try {
			PrivateKey.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"PrivateKey": PrivateKey
};

export const Autoguard = {
	"PrivateKey": PrivateKey
};
