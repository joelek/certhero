// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type Domain = {
	"id": number,
	"name": string
};

export const Domain = {
	as(subject: any, path: string = ""): Domain {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject;
					}
					throw "Type guard \"Number\" failed at \"" + path + "\"!";
				})(subject["id"], path + "[\"id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject;
					}
					throw "Type guard \"String\" failed at \"" + path + "\"!";
				})(subject["name"], path + "[\"name\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Domain {
		try {
			Domain.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type GenericRecord = {
	"id": number,
	"domainId": number,
	"nodeName": string,
	"state": boolean,
	"recordType": string
};

export const GenericRecord = {
	as(subject: any, path: string = ""): GenericRecord {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject;
					}
					throw "Type guard \"Number\" failed at \"" + path + "\"!";
				})(subject["id"], path + "[\"id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject;
					}
					throw "Type guard \"Number\" failed at \"" + path + "\"!";
				})(subject["domainId"], path + "[\"domainId\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject;
					}
					throw "Type guard \"String\" failed at \"" + path + "\"!";
				})(subject["nodeName"], path + "[\"nodeName\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Boolean)) {
						return subject;
					}
					throw "Type guard \"Boolean\" failed at \"" + path + "\"!";
				})(subject["state"], path + "[\"state\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject;
					}
					throw "Type guard \"String\" failed at \"" + path + "\"!";
				})(subject["recordType"], path + "[\"recordType\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is GenericRecord {
		try {
			GenericRecord.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type TextRecord = (GenericRecord & {
	"recordType": "TXT",
	"textData": string
});

export const TextRecord = {
	as(subject: any, path: string = ""): TextRecord {
		return ((subject, path) => {
			(GenericRecord.as)(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === globalThis.Object)) {
					((subject, path) => {
						if (subject === "TXT") {
							return subject;
						}
						throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
					})(subject["recordType"], path + "[\"recordType\"]");
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.String)) {
							return subject;
						}
						throw "Type guard \"String\" failed at \"" + path + "\"!";
					})(subject["textData"], path + "[\"textData\"]");
					return subject;
				}
				throw "Type guard \"Object\" failed at \"" + path + "\"!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is TextRecord {
		try {
			TextRecord.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Record = (GenericRecord | TextRecord);

export const Record = {
	as(subject: any, path: string = ""): Record {
		return ((subject, path) => {
			try {
				return (GenericRecord.as)(subject, path);
			} catch (error) {}
			try {
				return (TextRecord.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is Record {
		try {
			Record.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type GetDomainsResponse = {
	"body": {
		"domains": Domain[]
	}
};

export const GetDomainsResponse = {
	as(subject: any, path: string = ""): GetDomainsResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(Domain.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Type guard \"Array\" failed at \"" + path + "\"!";
						})(subject["domains"], path + "[\"domains\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["body"], path + "[\"body\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is GetDomainsResponse {
		try {
			GetDomainsResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type GetRecordsResponse = {
	"body": {
		"dnsRecords": Record[]
	}
};

export const GetRecordsResponse = {
	as(subject: any, path: string = ""): GetRecordsResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(Record.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Type guard \"Array\" failed at \"" + path + "\"!";
						})(subject["dnsRecords"], path + "[\"dnsRecords\"]");
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["body"], path + "[\"body\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is GetRecordsResponse {
		try {
			GetRecordsResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type CreateRecordResponse = {
	"body": Record
};

export const CreateRecordResponse = {
	as(subject: any, path: string = ""): CreateRecordResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(Record.as)(subject["body"], path + "[\"body\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is CreateRecordResponse {
		try {
			CreateRecordResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type UpdateRecordResponse = {
	"body": Record
};

export const UpdateRecordResponse = {
	as(subject: any, path: string = ""): UpdateRecordResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(Record.as)(subject["body"], path + "[\"body\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is UpdateRecordResponse {
		try {
			UpdateRecordResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type DeleteRecordResponse = {
	"body": {}
};

export const DeleteRecordResponse = {
	as(subject: any, path: string = ""): DeleteRecordResponse {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						return subject;
					}
					throw "Type guard \"Object\" failed at \"" + path + "\"!";
				})(subject["body"], path + "[\"body\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is DeleteRecordResponse {
		try {
			DeleteRecordResponse.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"Domain": Domain,
	"GenericRecord": GenericRecord,
	"TextRecord": TextRecord,
	"Record": Record,
	"GetDomainsResponse": GetDomainsResponse,
	"GetRecordsResponse": GetRecordsResponse,
	"CreateRecordResponse": CreateRecordResponse,
	"UpdateRecordResponse": UpdateRecordResponse,
	"DeleteRecordResponse": DeleteRecordResponse
};

export const Autoguard = {
	"Domain": Domain,
	"GenericRecord": GenericRecord,
	"TextRecord": TextRecord,
	"Record": Record,
	"GetDomainsResponse": GetDomainsResponse,
	"GetRecordsResponse": GetRecordsResponse,
	"CreateRecordResponse": CreateRecordResponse,
	"UpdateRecordResponse": UpdateRecordResponse,
	"DeleteRecordResponse": DeleteRecordResponse
};
